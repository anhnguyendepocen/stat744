---
title: "Introduction"
author: "Ben Bolker"
date:  "`r format(Sys.time(), '%H:%M %d %B %Y')`"
output: tufte_handout
bibliography: ../nonlin.bib
header-includes:
   - \\usepackage[utf8]{inputenc}
---

# Overview/logistics

* applied focus
* all class materials at https://github.com/bbolker/stat744
* class-led, in pairs
    * Monday: lecture
	* Thursday: practical exercise
* [topics](../topics.md)

# Big picture

* dynamical models
   * involve both *process* and *observation* error/noise
   
-----------------------------------------------------------------------------
time          process         state          space           model     
------------  -------------   -----------    ----------      -----------------
continuous    deterministic   continuous                     ODE 

continuous    stochastic      continuous                     stochastic ODE 

continuous    deterministic,  continuous                     difference equation
              stochastic
			   
discrete	  stochastic      discrete                       Markov process
			   
continuous    stochastic      discrete                       continuous-time MP
 
----------------------------------------------------------------------

* nonlinearity
   * variance changes unpredictably
* non-Gaussian 
   * constrained bounds $\to$ generalized linearity
   * variances don't add predictably

# Geometry: process-error-only vs observation-error-only

* in general, processes are subject to both *measurement error* (=observation eror, observation noise) and *process error* (noise)
* trajectory-matching ("shooting") vs. gradient-matching ("one-step-ahead")
* See Bolker chapter 11 for pictures

# Simulation

* important for testing, calibration, simulation-based methods
* need `for` loops, can rarely vectorize
* `deSolve` package for ODEs
* stochastic ODEs: code your own [Euler-Maryuma](https://en.wikipedia.org/wiki/Euler%E2%80%93Maruyama_method) (easy) or [Milstein](https://en.wikipedia.org/wiki/Milstein_method), or use something from Darren Wilkinson's <#Rpkg smfsb> package [`library("sos"); findFn("maruyama")`]
* discrete time: standard `r*` functions (`rnorm`, `rpois`, `rbinom`, `rnbinom` ...)
* continuous-time, discrete-space: Gillespie algorithm or tau-leaping: <#Rpkg smfsb>, <#Rpkg GillespieSSA>, <#Rpkg pomp>, <#Rpkg StochKit2R> ...
* speed: may need to implement in C++ (<#Rpkg Rcpp>; [NIMBLE](http://r-nimble.org)) ...

# The geometry of inference

* Wald approximations
* likelihood profiles

# Methods overview

* MCMC/Gibbs sampling
* Laplace approximation
